{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAmBC,SAASC,cAAc,SAehD,SAASC,EAAcC,EAAUC,IAbjC,SAAuBD,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,KAKLQ,CAAcT,EAAUC,GACrBS,MAAK,SAAAC,G,IAAGC,EAAQD,EAARX,SAAUa,EAAKF,EAALV,MACjBa,EAAApB,GAASqB,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAEvEK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARX,SAAUa,EAAKF,EAALV,MAClBa,EAAApB,GAASqB,OAAOI,QAAQ,sBAAuCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAI3EjB,EAAiBwB,iBAAiB,UAAU,SAAAC,GAC1CA,EAAMC,iBAEN,IAAMrB,EAAQsB,SAAS3B,EAAiB4B,SAASvB,MAAMwB,OACjDC,EAAOH,SAAS3B,EAAiB4B,SAASE,KAAKD,OAC/CE,EAASJ,SAAS3B,EAAiB4B,SAASG,OAAOF,OAEzD,GAAIxB,EAAQ,GAAKyB,EAAO,GAAKC,EAAS,EACpCb,EAAApB,GAASqB,OAAOa,QAAQ,wDAExB,IAAK,IAAI5B,EAAW,EAAGA,EAAW2B,EAAQ3B,IAAY,CAEpDD,EAAcC,EAAW,EADJC,EAAQD,EAAW0B,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst promiseGenerator = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction handlePromise(position, delay) {\n  createPromise(position, delay)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\npromiseGenerator.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = parseInt(promiseGenerator.elements.delay.value);\n  const step = parseInt(promiseGenerator.elements.step.value);\n  const amount = parseInt(promiseGenerator.elements.amount.value);\n\n  if (delay < 0 || step < 0 || amount < 0) {\n    Notiflix.Notify.warning('⚠️ The form should contain only positive values');\n  } else {\n    for (let position = 0; position < amount; position++) {\n      const currentDelay = delay + position * step;\n      handlePromise(position + 1, currentDelay);\n    }\n  }\n});"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$promiseGenerator","document","querySelector","$ce04d3a99e08e73b$var$handlePromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$createPromise","then","param","_$position","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure","addEventListener","event","preventDefault","parseInt","elements","value","step","amount","warning"],"version":3,"file":"03-promises.9a3d3c26.js.map"}