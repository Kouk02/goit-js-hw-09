{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SA6BA,SAASC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACHH,EACAF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAExBA,E,IArCXQ,SAASC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GACjEA,EAAEC,iBAEF,IAAMC,EAAQC,SAASN,SAASC,cAAc,uBAAuBM,OAC/DC,EAAOF,SAASN,SAASC,cAAc,sBAAsBM,OAC7DE,EAASH,SAASN,SAASC,cAAc,wBAAwBM,OAEvE,GAAIG,MAAML,IAAUK,MAAMF,IAASE,MAAMD,IAAWJ,EAAQ,GAAKG,GAAQ,GAAKC,GAAU,EAEpFE,EAAAvB,GAASwB,OAAOC,QAAQ,kCAI5B,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,IAAK,CAI9BxB,EAHiBwB,EACIT,GAASS,EAAI,GAAKN,GAGlCO,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACfmB,EAAAvB,GAASwB,OAAOK,QAAQ,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAEzE2B,OAAM,SAAAH,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAChBmB,EAAAvB,GAASwB,OAAOC,QAAQ,sBAAqCK,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\ndocument.querySelector('.form').addEventListener('submit', function (e) {\n    e.preventDefault();\n\n    const delay = parseInt(document.querySelector('input[name=\"delay\"]').value);\n    const step = parseInt(document.querySelector('input[name=\"step\"]').value);\n    const amount = parseInt(document.querySelector('input[name=\"amount\"]').value);\n\n    if (isNaN(delay) || isNaN(step) || isNaN(amount) || delay < 0 || step <= 0 || amount <= 0) {\n        // Input validation\n        Notiflix.Notify.Failure('Please enter valid values');\n        return;\n    }\n\n    for (let i = 1; i <= amount; i++) {\n        const position = i;\n        const currentDelay = delay + (i - 1) * step;\n\n        createPromise(position, currentDelay)\n            .then(({ position, delay }) => {\n                Notiflix.Notify.Success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n            })\n            .catch(({ position, delay }) => {\n                Notiflix.Notify.Failure(`❌ Rejected promise ${position} in ${delay}ms`);\n            });\n    }\n});\n\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n        const shouldResolve = Math.random() > 0.3;\n\n        setTimeout(() => {\n            if (shouldResolve) {\n                resolve({ position, delay });\n            } else {\n                reject({ position, delay });\n            }\n        }, delay);\n    });\n}\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","parseInt","value","step","amount","isNaN","$parcel$interopDefault","Notify","Failure","i","then","param","Success","concat","catch"],"version":3,"file":"03-promises.11c7e654.js.map"}