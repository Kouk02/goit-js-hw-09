{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAmBC,SAASC,cAAc,SAehD,SAASC,EAAcC,EAAUC,GAbjC,IAAuBC,EAAUC,GAAVD,EAcPF,EAdiBG,EAcPF,EAbjB,IAAIG,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,KAMRQ,MAAK,EAACT,SAAEA,EAAQC,MAAEA,MACjBS,EAAAlB,GAASmB,OAAOC,QAAQ,uBAAqBZ,QAAiBC,MAAU,IAEzEY,OAAM,EAACb,SAAEA,EAAQC,MAAEA,MAClBS,EAAAlB,GAASmB,OAAOG,QAAQ,sBAAoBd,QAAiBC,MAAU,G,CAI7EP,EAAiBqB,iBAAiB,UAAUC,IAC1CA,EAAMC,iBAEN,MAAMhB,EAAQiB,SAASxB,EAAiByB,SAASlB,MAAMmB,OACjDC,EAAOH,SAASxB,EAAiByB,SAASE,KAAKD,OAC/CE,EAASJ,SAASxB,EAAiByB,SAASG,OAAOF,OAEzD,GAAInB,EAAQ,GAAKoB,EAAO,GAAKC,EAAS,EACpCZ,EAAAlB,GAASmB,OAAOY,QAAQ,wDAExB,IAAK,IAAIvB,EAAW,EAAGA,EAAWsB,EAAQtB,IAAY,CAEpDH,EAAcG,EAAW,EADJC,EAAQD,EAAWqB,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst promiseGenerator = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction handlePromise(position, delay) {\n  createPromise(position, delay)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\npromiseGenerator.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = parseInt(promiseGenerator.elements.delay.value);\n  const step = parseInt(promiseGenerator.elements.step.value);\n  const amount = parseInt(promiseGenerator.elements.amount.value);\n\n  if (delay < 0 || step < 0 || amount < 0) {\n    Notiflix.Notify.warning('⚠️ The form should contain only positive values');\n  } else {\n    for (let position = 0; position < amount; position++) {\n      const currentDelay = delay + position * step;\n      handlePromise(position + 1, currentDelay);\n    }\n  }\n});"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$promiseGenerator","document","querySelector","$47d4ff9957288465$var$handlePromise","position1","delay1","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","$parcel$interopDefault","Notify","success","catch","failure","addEventListener","event","preventDefault","parseInt","elements","value","step","amount","warning"],"version":3,"file":"03-promises.b222c1d8.js.map"}